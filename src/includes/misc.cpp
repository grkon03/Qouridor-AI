#include "misc.hpp"

namespace QuoridorAI
{
    namespace misc
    {
        constexpr uint64_t fullbits64 = 0xffffffffffffffffULL;
        constexpr uint32_t fullbits32 = 0xffffffffUL;

        /**
         * @brief lower bits mask of 64-bit bitmap
         * ex) lowerBitsFullMask64[5] = 0b11111
         */
        constexpr uint64_t lowerBitsFullMask64[65] = {
            0,
            fullbits64 >> 63,
            fullbits64 >> 62,
            fullbits64 >> 61,
            fullbits64 >> 60,
            fullbits64 >> 59,
            fullbits64 >> 58,
            fullbits64 >> 57,
            fullbits64 >> 56,
            fullbits64 >> 55,
            fullbits64 >> 54,
            fullbits64 >> 53,
            fullbits64 >> 52,
            fullbits64 >> 51,
            fullbits64 >> 50,
            fullbits64 >> 49,
            fullbits64 >> 48,
            fullbits64 >> 47,
            fullbits64 >> 46,
            fullbits64 >> 45,
            fullbits64 >> 44,
            fullbits64 >> 43,
            fullbits64 >> 42,
            fullbits64 >> 41,
            fullbits64 >> 40,
            fullbits64 >> 39,
            fullbits64 >> 38,
            fullbits64 >> 37,
            fullbits64 >> 36,
            fullbits64 >> 35,
            fullbits64 >> 34,
            fullbits64 >> 33,
            fullbits64 >> 32,
            fullbits64 >> 31,
            fullbits64 >> 30,
            fullbits64 >> 29,
            fullbits64 >> 28,
            fullbits64 >> 27,
            fullbits64 >> 26,
            fullbits64 >> 25,
            fullbits64 >> 24,
            fullbits64 >> 23,
            fullbits64 >> 22,
            fullbits64 >> 21,
            fullbits64 >> 20,
            fullbits64 >> 19,
            fullbits64 >> 18,
            fullbits64 >> 17,
            fullbits64 >> 16,
            fullbits64 >> 15,
            fullbits64 >> 14,
            fullbits64 >> 13,
            fullbits64 >> 12,
            fullbits64 >> 11,
            fullbits64 >> 10,
            fullbits64 >> 9,
            fullbits64 >> 8,
            fullbits64 >> 7,
            fullbits64 >> 6,
            fullbits64 >> 5,
            fullbits64 >> 4,
            fullbits64 >> 3,
            fullbits64 >> 2,
            fullbits64 >> 1,
            fullbits64 >> 0,
        };

        /**
         * @brief lower bits mask of 32-bit bitmap
         * ex) lowerBitsFullMask32[5] = 0b11111
         */
        constexpr uint32_t lowerBitsFullMask32[33] = {
            0,
            fullbits32 >> 31,
            fullbits32 >> 30,
            fullbits32 >> 29,
            fullbits32 >> 28,
            fullbits32 >> 27,
            fullbits32 >> 26,
            fullbits32 >> 25,
            fullbits32 >> 24,
            fullbits32 >> 23,
            fullbits32 >> 22,
            fullbits32 >> 21,
            fullbits32 >> 20,
            fullbits32 >> 19,
            fullbits32 >> 18,
            fullbits32 >> 17,
            fullbits32 >> 16,
            fullbits32 >> 15,
            fullbits32 >> 14,
            fullbits32 >> 13,
            fullbits32 >> 12,
            fullbits32 >> 11,
            fullbits32 >> 10,
            fullbits32 >> 9,
            fullbits32 >> 8,
            fullbits32 >> 7,
            fullbits32 >> 6,
            fullbits32 >> 5,
            fullbits32 >> 4,
            fullbits32 >> 3,
            fullbits32 >> 2,
            fullbits32 >> 1,
            fullbits32 >> 0,
        };

        /**
         * @brief upper bits mask of 64-bit bitmap
         * ex) upperBitsFullMask64[5] = 0b1111100...00
         */
        constexpr uint64_t upperBitsFullMask64[65] = {
            ~lowerBitsFullMask64[0],
            ~lowerBitsFullMask64[1],
            ~lowerBitsFullMask64[2],
            ~lowerBitsFullMask64[3],
            ~lowerBitsFullMask64[4],
            ~lowerBitsFullMask64[5],
            ~lowerBitsFullMask64[6],
            ~lowerBitsFullMask64[7],
            ~lowerBitsFullMask64[8],
            ~lowerBitsFullMask64[9],
            ~lowerBitsFullMask64[10],
            ~lowerBitsFullMask64[11],
            ~lowerBitsFullMask64[12],
            ~lowerBitsFullMask64[13],
            ~lowerBitsFullMask64[14],
            ~lowerBitsFullMask64[15],
            ~lowerBitsFullMask64[16],
            ~lowerBitsFullMask64[17],
            ~lowerBitsFullMask64[18],
            ~lowerBitsFullMask64[19],
            ~lowerBitsFullMask64[20],
            ~lowerBitsFullMask64[21],
            ~lowerBitsFullMask64[22],
            ~lowerBitsFullMask64[23],
            ~lowerBitsFullMask64[24],
            ~lowerBitsFullMask64[25],
            ~lowerBitsFullMask64[26],
            ~lowerBitsFullMask64[27],
            ~lowerBitsFullMask64[28],
            ~lowerBitsFullMask64[29],
            ~lowerBitsFullMask64[30],
            ~lowerBitsFullMask64[31],
            ~lowerBitsFullMask64[32],
            ~lowerBitsFullMask64[33],
            ~lowerBitsFullMask64[34],
            ~lowerBitsFullMask64[35],
            ~lowerBitsFullMask64[36],
            ~lowerBitsFullMask64[37],
            ~lowerBitsFullMask64[38],
            ~lowerBitsFullMask64[39],
            ~lowerBitsFullMask64[40],
            ~lowerBitsFullMask64[41],
            ~lowerBitsFullMask64[42],
            ~lowerBitsFullMask64[43],
            ~lowerBitsFullMask64[44],
            ~lowerBitsFullMask64[45],
            ~lowerBitsFullMask64[46],
            ~lowerBitsFullMask64[47],
            ~lowerBitsFullMask64[48],
            ~lowerBitsFullMask64[49],
            ~lowerBitsFullMask64[50],
            ~lowerBitsFullMask64[51],
            ~lowerBitsFullMask64[52],
            ~lowerBitsFullMask64[53],
            ~lowerBitsFullMask64[54],
            ~lowerBitsFullMask64[55],
            ~lowerBitsFullMask64[56],
            ~lowerBitsFullMask64[57],
            ~lowerBitsFullMask64[58],
            ~lowerBitsFullMask64[59],
            ~lowerBitsFullMask64[60],
            ~lowerBitsFullMask64[61],
            ~lowerBitsFullMask64[62],
            ~lowerBitsFullMask64[63],
            ~lowerBitsFullMask64[64],
        };

        /**
         * @brief upper bits mask of 32-bit bitmap
         * ex) upperBitsFullMask32[5] = 0b1111100...00
         */
        constexpr uint64_t upperBitsFullMask32[33] = {
            ~lowerBitsFullMask32[0],
            ~lowerBitsFullMask32[1],
            ~lowerBitsFullMask32[2],
            ~lowerBitsFullMask32[3],
            ~lowerBitsFullMask32[4],
            ~lowerBitsFullMask32[5],
            ~lowerBitsFullMask32[6],
            ~lowerBitsFullMask32[7],
            ~lowerBitsFullMask32[8],
            ~lowerBitsFullMask32[9],
            ~lowerBitsFullMask32[10],
            ~lowerBitsFullMask32[11],
            ~lowerBitsFullMask32[12],
            ~lowerBitsFullMask32[13],
            ~lowerBitsFullMask32[14],
            ~lowerBitsFullMask32[15],
            ~lowerBitsFullMask32[16],
            ~lowerBitsFullMask32[17],
            ~lowerBitsFullMask32[18],
            ~lowerBitsFullMask32[19],
            ~lowerBitsFullMask32[20],
            ~lowerBitsFullMask32[21],
            ~lowerBitsFullMask32[22],
            ~lowerBitsFullMask32[23],
            ~lowerBitsFullMask32[24],
            ~lowerBitsFullMask32[25],
            ~lowerBitsFullMask32[26],
            ~lowerBitsFullMask32[27],
            ~lowerBitsFullMask32[28],
            ~lowerBitsFullMask32[29],
            ~lowerBitsFullMask32[30],
            ~lowerBitsFullMask32[31],
            ~lowerBitsFullMask64[32],
        };

        /**
         * @brief one bit mask of 64-bit bitmap (0-indexed)
         * ex) oneBitMask64[3] = 0b1000
         */
        constexpr uint64_t oneBitMask64[64] = {
            1ULL << 0,
            1ULL << 1,
            1ULL << 2,
            1ULL << 3,
            1ULL << 4,
            1ULL << 5,
            1ULL << 6,
            1ULL << 7,
            1ULL << 8,
            1ULL << 9,
            1ULL << 10,
            1ULL << 11,
            1ULL << 12,
            1ULL << 13,
            1ULL << 14,
            1ULL << 15,
            1ULL << 16,
            1ULL << 17,
            1ULL << 18,
            1ULL << 19,
            1ULL << 20,
            1ULL << 21,
            1ULL << 22,
            1ULL << 23,
            1ULL << 24,
            1ULL << 25,
            1ULL << 26,
            1ULL << 27,
            1ULL << 28,
            1ULL << 29,
            1ULL << 30,
            1ULL << 31,
            1ULL << 32,
            1ULL << 33,
            1ULL << 34,
            1ULL << 35,
            1ULL << 36,
            1ULL << 37,
            1ULL << 38,
            1ULL << 39,
            1ULL << 40,
            1ULL << 41,
            1ULL << 42,
            1ULL << 43,
            1ULL << 44,
            1ULL << 45,
            1ULL << 46,
            1ULL << 47,
            1ULL << 48,
            1ULL << 49,
            1ULL << 50,
            1ULL << 51,
            1ULL << 52,
            1ULL << 53,
            1ULL << 54,
            1ULL << 55,
            1ULL << 56,
            1ULL << 57,
            1ULL << 58,
            1ULL << 59,
            1ULL << 60,
            1ULL << 61,
            1ULL << 62,
            1ULL << 63,
        };

        /**
         * @brief one bit mask of 64-bit bitmap (0-indexed)
         * ex) oneBitMask64[3] = 0b1000
         */
        constexpr uint32_t oneBitMask32[32] = {
            1UL << 0,
            1UL << 1,
            1UL << 2,
            1UL << 3,
            1UL << 4,
            1UL << 5,
            1UL << 6,
            1UL << 7,
            1UL << 8,
            1UL << 9,
            1UL << 10,
            1UL << 11,
            1UL << 12,
            1UL << 13,
            1UL << 14,
            1UL << 15,
            1UL << 16,
            1UL << 17,
            1UL << 18,
            1UL << 19,
            1UL << 20,
            1UL << 21,
            1UL << 22,
            1UL << 23,
            1UL << 24,
            1UL << 25,
            1UL << 26,
            1UL << 27,
            1UL << 28,
            1UL << 29,
            1UL << 30,
            1UL << 31,
        };
    }
}